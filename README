This is an implementation of JÃ¼rgen Schmidhuber's PowerPlay[1] architecture for
'Universal Artificial Intelligence', implemented in the dependently-typed
language Coq[2]. Using a system like Coq gives us two things:

 * The PowerPlay implementation is formally verified
 * We can build PowerPlay's proof machinery on top of Coq's

The repository is layed out as follows:

  * Arch.v     Initial attempt at PowerPlay specification, split into inter-
               dependent modules
  * Classes.v  Rewrite of Arch.v using Coq typeclasses, although this now mostly
               contains regular inductive types
  * Expr.v     Initial attempt at defining a reflective Coq-in-Coq
               implementation
  * Simple.v   A simple, standalone PowerPlay specification
  * SK.v       A (currently unfinished) PowerPlay implementation using SK
               combinatory logic
  * Sqrt.v     Straightforward implementation of the Simple.v specification for
               finding square roots in lookup tables
  * Util.v     Generic utility functions and theorems

[1] http://www.idsia.ch/~juergen/interest.html
[2] http://coq.inria.fr
